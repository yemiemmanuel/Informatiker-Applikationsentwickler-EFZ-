<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>SWATCH Snake</title>
  <style>
    html { scroll-behavior: smooth; }
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      color: #111;
      background: linear-gradient(135deg, #ffffff 0%, #fff1f1 45%, #e71d2b 100%);
      min-height: 100vh;
    }
    .corner {
      position: fixed; width: 76px; height: 76px; object-fit: contain;
      opacity: 0.2; pointer-events: none; user-select: none; z-index: 0;
    }
    .corner.tl { top: 10px; left: 10px; }
    .corner.tr { top: 10px; right: 10px; }
    .corner.bl { bottom: 10px; left: 10px; }
    .corner.br { bottom: 10px; right: 10px; }

    .content { position: relative; z-index: 1; }
    .page {
      min-height: 100vh;
      display: flex; flex-direction: column; align-items: center; gap: 16px;
      padding: 32px 16px 56px;
    }

    .brand {
      display: flex; align-items: center; gap: 12px;
      letter-spacing: 2px; font-weight: 800; font-size: 28px; color: #111;
    }
    .brand .plus {
      display: inline-block; width: 24px; height: 24px;
      background: #e71d2b; position: relative; border-radius: 4px;
    }
    .brand .plus::before, .brand .plus::after {
      content: ""; position: absolute; background: #fff; left: 50%; top: 50%;
      transform: translate(-50%,-50%);
    }
    .brand .plus::before { width: 70%; height: 22%; }
    .brand .plus::after  { width: 22%; height: 70%; }

    .hud {
      display: flex; gap: 12px; align-items: center; justify-content: center;
      flex-wrap: wrap;
    }
    .btn {
      padding: 12px 18px; border: none; border-radius: 12px;
      background: #1a5bd6; color: #fff; font-weight: 700; cursor: pointer;
      box-shadow: 0 3px 10px rgba(0,0,0,0.14);
    }
    .btn:hover { filter: brightness(1.06); }
    .stat {
      padding: 8px 12px; border-radius: 10px; background: #fff; color: #333;
      box-shadow: 0 1px 4px rgba(0,0,0,0.08); font-weight: 700;
      min-width: 110px; text-align: center;
    }

    .frame {
      background: #b31322;
      border: 8px solid #8a0e1a;
      border-radius: 16px;
      box-shadow: 0 12px 30px rgba(0,0,0,0.2), inset 0 0 0 1px rgba(255,255,255,0.2);
      position: relative;
    }
    canvas {
      display: block;
      touch-action: none;
      border-radius: 10px;
    }

    .overlay {
      position: absolute; inset: 0; display: none;
      align-items: center; justify-content: center;
      backdrop-filter: blur(2px);
      padding: 16px;
    }
    .card {
      width: 360px; border-radius: 18px; overflow: hidden;
      box-shadow: 0 18px 40px rgba(0,0,0,0.28);
      background: #ffffff;
      display: grid; grid-template-rows: auto 84px auto;
      border: 1px solid rgba(0,0,0,0.06);
    }
    .card-head {
      background: #51c5ff;
      color: #fff;
      padding: 18px 20px 12px;
      display: grid; grid-template-columns: 1fr 1fr; align-items: center; text-align: center;
      gap: 12px;
    }
    .kpi { font-size: 16px; font-weight: 700; display: grid; gap: 4px; justify-items: center; }
    .kpi .icon { font-size: 28px; line-height: 1; }
    .kpi .val { font-size: 22px; }
    .card-mid {
      background: #73d1ff;
      display: flex; align-items: flex-end; justify-content: center; padding-bottom: 8px;
      position: relative;
    }
    .snake-preview {
      width: 280px; height: 36px; background: #ff334d; border-radius: 18px;
      position: relative;
    }
    .snake-preview .eye {
      position: absolute; top: -10px; width: 16px; height: 16px; border-radius: 50%;
      background: #fff; border: 2px solid #1f1f1f;
    }
    .snake-preview .eye.left  { left: 210px; }
    .snake-preview .eye.right { left: 232px; }
    .snake-preview .pupil {
      position: absolute; width: 6px; height: 6px; border-radius: 50%;
      background: #111; top: 4px; left: 4px;
    }
    .card-foot {
      background: repeating-linear-gradient(90deg, #b8d97b 0 24px, #a7cf64 24px 48px);
      padding: 16px; display: flex; justify-content: center; gap: 12px;
    }
    .card-actions {
      padding: 16px;
      display: flex; gap: 12px; justify-content: center; background: #ffffff;
    }
    .btn-play {
      background: #1a5bd6; color: #fff; font-weight: 800; border: none;
      border-radius: 12px; padding: 12px 24px; font-size: 16px;
      display: inline-flex; align-items: center; gap: 8px; cursor: pointer;
      box-shadow: 0 6px 16px rgba(26,91,214,0.35);
    }
    .btn-gear {
      width: 48px; height: 48px; border-radius: 12px; border: none; background: #1a5bd6; color: #fff;
      box-shadow: 0 6px 16px rgba(26,91,214,0.35); cursor: pointer;
      font-size: 20px; display: inline-flex; align-items: center; justify-content: center;
    }
  </style>
</head>
<body>
  <img class="corner tl" src="swatch-logo.png" alt="Logo">
  <img class="corner tr" src="swatch-logo.png" alt="Logo">
  <img class="corner bl" src="swatch-logo.png" alt="Logo">
  <img class="corner br" src="swatch-logo.png" alt="Logo">

  <div class="content page">
    <div class="brand">SWATCH <span class="plus"></span></div>

    <div class="hud">
      <button id="restart" class="btn" style="display:none;">Neu starten</button>
      <div class="stat" id="score">Score: 0</div>
      <div class="stat" id="best">Best: 0</div>
    </div>

    <div class="frame">
      <canvas id="board" width="500" height="500" aria-label="Snake Spielfeld"></canvas>

      <div id="overlay" class="overlay">
        <div class="card">
          <div class="card-head">
            <div class="kpi">
              <div class="icon">‚åöÔ∏è</div>
              <div>Uhren</div>
              <div class="val" id="kpi-apples">0</div>
            </div>
            <div class="kpi">
              <div class="icon">üèÜ</div>
              <div>Best</div>
              <div class="val" id="kpi-best">0</div>
            </div>
          </div>
          <div class="card-mid">
            <div class="snake-preview">
              <div class="eye left"><div class="pupil"></div></div>
              <div class="eye right"><div class="pupil"></div></div>
            </div>
          </div>
          <div class="card-foot"></div>
          <div class="card-actions">
            <button id="startBtn" class="btn-play">‚ñ∂ Play</button>
            <button class="btn-gear">‚öôÔ∏è</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    window.addEventListener('keydown', (e) => {
      const block = ['ArrowUp','ArrowDown','ArrowLeft','ArrowRight',' '];
      if (block.includes(e.key)) e.preventDefault();
    }, { passive: false });

    const canvas = document.getElementById('board');
    const ctx = canvas.getContext('2d');
    const scoreEl = document.getElementById('score');
    const bestEl = document.getElementById('best');
    const kpiApples = document.getElementById('kpi-apples');
    const kpiBest = document.getElementById('kpi-best');
    const restartBtn = document.getElementById('restart');
    const overlay = document.getElementById('overlay');
    const startBtn = document.getElementById('startBtn');

    const size = 20;
    const cols = canvas.width / size;
    const rows = canvas.height / size;

    let snake, dir, nextDir, items, alive, score, best = 0, loopId, growPending;

    function initState() {
      snake = [{ x: 10 * size, y: 12 * size }];
      dir = { x: 0, y: 0 };
      nextDir = { x: size, y: 0 };
      items = [];
      score = 0;
      growPending = 0;
      alive = true;
      scoreEl.textContent = 'Score: ' + score;
      bestEl.textContent = 'Best: ' + best;
      kpiApples.textContent = '0';
      kpiBest.textContent = best.toString();
      items = generateInitialItems(3);
    }

    function startGame() {
      if (dir.x === 0 && dir.y === 0) dir = { x: size, y: 0 };
      if (loopId) clearInterval(loopId);
      loopId = setInterval(tick, 100);
      restartBtn.style.display = 'inline-block';
      draw();
    }

    function stopGame() {
      if (loopId) clearInterval(loopId);
      loopId = null;
    }

    function generateInitialItems(n) {
      const arr = [];
      while (arr.length < n) arr.push(randomItem(arr));
      return arr;
    }

    function randomItem(existing) {
      const type = Math.random() < 0.25 ? 'flag' : 'clock';
      let fx, fy;
      do {
        fx = Math.floor(Math.random() * cols) * size;
        fy = Math.floor(Math.random() * rows) * size;
      } while (
        snake.some(p => p.x === fx && p.y === fy) ||
        existing.some(it => it.x === fx && it.y === fy) ||
        items.some(it => it.x === fx && it.y === fy)
      );
      return { x: fx, y: fy, type };
    }

    window.addEventListener('keydown', (e) => {
      if (!alive) return;
      if (e.key === 'ArrowUp'   && dir.y === 0) nextDir = { x: 0, y: -size };
      if (e.key === 'ArrowDown' && dir.y === 0) nextDir = { x: 0, y:  size };
      if (e.key === 'ArrowLeft' && dir.x === 0) nextDir = { x: -size, y: 0 };
      if (e.key === 'ArrowRight'&& dir.x === 0) nextDir = { x:  size, y: 0 };
    });

    startBtn.addEventListener('click', () => {
      overlay.style.display = 'none';
      startGame();
    });

    restartBtn.addEventListener('click', () => {
      stopGame();
      overlay.style.display = 'flex';
      initState();
      draw();
    });

    function tick() {
      if (!alive) return;
      dir = nextDir;

      const head = { x: snake[0].x + dir.x, y: snake[0].y + dir.y };

      if (head.x < 0 || head.y < 0 || head.x >= canvas.width || head.y >= canvas.height) {
        return gameOver();
      }
      if (snake.some(p => p.x === head.x && p.y === head.y)) {
        return gameOver();
      }

      snake.unshift(head);

      const idx = items.findIndex(it => it.x === head.x && it.y === head.y);
      if (idx !== -1) {
        const eaten = items[idx];
        if (eaten.type === 'clock') {
          score += 1;
          growPending += 1;
        } else {
          score += 5;
          growPending += 5;
        }
        scoreEl.textContent = 'Score: ' + score;
        kpiApples.textContent = score.toString();
        items.splice(idx, 1);
        items.push(randomItem(items));
      }

      if (growPending > 0) {
        growPending--;
      } else {
        snake.pop();
      }

      draw();
    }

    function gameOver() {
      alive = false;
      stopGame();
      if (score > best) best = score;
      bestEl.textContent = 'Best: ' + best;
      kpiBest.textContent = best.toString();
      overlay.style.display = 'flex';
      restartBtn.style.display = 'inline-block';
    }

    function drawGrid() {
      ctx.save();
      ctx.lineWidth = 1;
      ctx.strokeStyle = 'rgba(255,255,255,0.35)';
      for (let x = 0; x <= canvas.width; x += size) {
        ctx.beginPath();
        ctx.moveTo(x + 0.5, 0);
        ctx.lineTo(x + 0.5, canvas.height);
        ctx.stroke();
      }
      for (let y = 0; y <= canvas.height; y += size) {
        ctx.beginPath();
        ctx.moveTo(0, y + 0.5);
        ctx.lineTo(canvas.width, y + 0.5);
        ctx.stroke();
      }
      ctx.restore();
    }

    function drawSnake() {
      ctx.fillStyle = '#ff334d';
      snake.forEach((seg) => {
        ctx.fillRect(seg.x, seg.y, size, size);
      });

      const head = snake[0];
      const cx = head.x + size / 2;
      const cy = head.y + size / 2;

      let ox = 0, oy = 0;
      if (dir.x > 0) ox = 4;
      if (dir.x < 0) ox = -4;
      if (dir.y > 0) oy = 4;
      if (dir.y < 0) oy = -4;

      let ex1, ey1, ex2, ey2;
      if (dir.x !== 0) {
        ex1 = cx + ox; ey1 = cy - 4;
        ex2 = cx + ox; ey2 = cy + 4;
      } else {
        ex1 = cx - 4; ey1 = cy + oy;
        ex2 = cx + 4; ey2 = cy + oy;
      }

      ctx.fillStyle = '#ffffff';
      ctx.beginPath(); ctx.arc(ex1, ey1, 3.2, 0, Math.PI * 2); ctx.fill();
      ctx.beginPath(); ctx.arc(ex2, ey2, 3.2, 0, Math.PI * 2); ctx.fill();

      ctx.fillStyle = '#111';
      const px1 = ex1 + (ox ? Math.sign(ox) * 1.2 : 0);
      const py1 = ey1 + (oy ? Math.sign(oy) * 1.2 : 0);
      const px2 = ex2 + (ox ? Math.sign(ox) * 1.2 : 0);
      const py2 = ey2 + (oy ? Math.sign(oy) * 1.2 : 0);
      ctx.beginPath(); ctx.arc(px1, py1, 1.6, 0, Math.PI * 2); ctx.fill();
      ctx.beginPath(); ctx.arc(px2, py2, 1.6, 0, Math.PI * 2); ctx.fill();
    }

    function drawSilverWatch(x, y) {
      const cx = x + size / 2;
      const cy = y + size / 2;
      const r = size * 0.42;

      const grad = ctx.createRadialGradient(cx - r*0.3, cy - r*0.3, r*0.2, cx, cy, r);
      grad.addColorStop(0, '#eeeeee');
      grad.addColorStop(0.5, '#cfcfcf');
      grad.addColorStop(1, '#a8a8a8');

      ctx.beginPath(); ctx.arc(cx, cy, r, 0, Math.PI*2);
      ctx.fillStyle = grad; ctx.fill();
      ctx.lineWidth = 1.1; ctx.strokeStyle = '#7f7f7f'; ctx.stroke();

      ctx.beginPath(); ctx.arc(cx, cy, r*0.72, 0, Math.PI*2);
      ctx.fillStyle = '#ffffff'; ctx.fill();
      ctx.lineWidth = 0.8; ctx.strokeStyle = '#cdcdcd'; ctx.stroke();

      const mr = r * 0.9;
      ctx.strokeStyle = '#6b6b6b'; ctx.lineCap = 'round';
      ctx.lineWidth = 1.6; ctx.beginPath(); ctx.moveTo(cx, cy); ctx.lineTo(cx + mr*0.55, cy - mr*0.2); ctx.stroke();
      ctx.lineWidth = 2.0; ctx.beginPath(); ctx.moveTo(cx, cy); ctx.lineTo(cx + mr*0.35, cy - mr*0.35); ctx.stroke();

      ctx.beginPath(); ctx.arc(cx, cy, 1.2, 0, Math.PI*2); ctx.fillStyle = '#7b7b7b'; ctx.fill();
    }

    function drawSwissFlag(x, y) {
      const pad = 2;
      const w = size - pad*2;
      const h = size - pad*2;
      const rx = x + pad;
      const ry = y + pad;

      ctx.fillStyle = '#e71d2b';
      ctx.fillRect(rx, ry, w, h);

      ctx.strokeStyle = '#a50f1b';
      ctx.lineWidth = 1;
      ctx.strokeRect(rx + 0.5, ry + 0.5, w - 1, h - 1);

      ctx.fillStyle = '#ffffff';
      const bar = Math.floor(w * 0.2);
      const cx = rx + w / 2;
      const cy = ry + h / 2;
      ctx.fillRect(cx - bar/2, ry + h*0.2, bar, h*0.6);
      ctx.fillRect(rx + w*0.2, cy - bar/2, w*0.6, bar);
    }

    function drawItems() {
      for (const it of items) {
        if (it.type === 'clock') drawSilverWatch(it.x, it.y);
        else drawSwissFlag(it.x, it.y);
      }
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = '#b31322';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      drawGrid();
      drawItems();
      drawSnake();
    }

    initState();
    overlay.style.display = 'flex';
    draw();
  </script>
</body>
</html>
